// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  TRIP
  PORTRAIT
  OBJECT
  LANDSCAPE
}

enum Grade {
  COMMON
  RARE
  SUPER_RARE
  LEGENDARY
}

enum CardStatus {
  SALE
  NOT_FOR_SALE
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  nickname     String
  password     String
  points       Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
  Purchase     Purchase[]
  Card         Card[]
  Exchange     Exchange[]
}

model Notification {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  content String
}

model Purchase {
  id      String @id @default(uuid())
  user    User   @relation(fields: [buyerId], references: [id])
  buyerId String
  cardId  String @default(uuid())
}

model Card {
  id                 String     @default(uuid())
  user               User       @relation(fields: [ownerId], references: [id])
  ownerId            String
  image              String
  name               String
  price              Int
  grade              Grade      @default(COMMON)
  genre              Genre      @default(LANDSCAPE)
  description        String
  totalQuantity      Int        @default(1)
  remainingQuantity  Int
  sellingQuantity    Int        @default(0)
  exchangingQuantity Int        @default(0)
  status             CardStatus @default(NOT_FOR_SALE)
  createdAt          DateTime   @default(now())
  shop               Shop?

  @@id([id, ownerId])
}

model Shop {
  card         Card     @relation(fields: [cardId, sellerId], references: [id, ownerId])
  cardId       String   @default("")
  sellerId     String   @default("")
  sellingPrice Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([cardId, sellerId])
}

model Exchange {
  id          String @id @default(uuid())
  user        User   @relation(fields: [requesterId], references: [id])
  requesterId String
}
