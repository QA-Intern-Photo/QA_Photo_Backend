// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  TRIP
  PORTRAIT
  OBJECT
  LANDSCAPE
}

enum Grade {
  COMMON
  RARE
  SUPER_RARE
  LEGENDARY
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  nickname     String
  password     String
  points       Int            @default(0)
  lastDrawTime DateTime?      @updatedAt
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
  Card         Card[]
}

model Notification {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  content String
}

model Card {
  id                String     @default(uuid())
  user              User       @relation(fields: [ownerId], references: [id], onDelete: SetDefault)
  ownerId           String     @default("Anonymous")
  image             String
  name              String
  price             Int
  grade             Grade      @default(COMMON)
  genre             Genre      @default(LANDSCAPE)
  description       String
  totalQuantity     Int        @default(1)
  availableQuantity Int
  createdAt         DateTime   @default(now())
  shop              Shop[]
  exchange          Exchange[]

  @@id([id, ownerId])
}

model Shop {
  id                     String     @id @default(uuid())
  card                   Card       @relation(fields: [cardId, sellerId], references: [id, ownerId], onDelete: Cascade)
  cardId                 String     @default("")
  sellerId               String     @default("")
  sellingPrice           Int
  remainingQuantity      Int
  sellingQuantity        Int        @default(0)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  wishExchangeGenre      Genre      @default(LANDSCAPE)
  wishExchangeGrade      Grade      @default(COMMON)
  wishExchageDescription String
  exchange               Exchange[]
}

model Exchange {
  id             String @id @default(uuid())
  shop           Shop   @relation(fields: [targetCardId], references: [id], onDelete: Cascade)
  targetCardId   String
  card           Card   @relation(fields: [offeredCardId, requesterId], references: [id, ownerId], onDelete: Cascade)
  offeredCardId  String
  requesterId    String
  requestMessage String
}
